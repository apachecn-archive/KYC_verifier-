---
eip: 
title: SBT for on-chain ZK KYC verification
description: Interface for on-chain tokenized zero-knowledge KYC verification 
author: Yu Liu (@yuliu-debond)
discussions-to:
status: draft
type: Standards Track
category: ERC
created: 
requires: 

---

## Abstract

- This EIP Provides defined interface for KYC verification.


## Motivation



## Specification

**Definition**

SBT:

**Functions**

```solidity
pragma solidity ^0.8.0;

    function ifVerified(address verifying, uint256 SBFID) external view returns (bool);
    function standardRequirement(uint256 SBFID) external view returns (Requirement[] memory);
    function changeStandardRequirement(uint256 SBFID, Requirement[] memory requirements) external returns (bool);
    function certify(address certifying, uint256 SBFID) external returns (bool);
    function revoke(address certifying, uint256 SBFID) external returns (bool);
```

**Events**

```solidity
pragma solidity ^0.8.0;

    event standardChanged(uint256 SBFID, Requirement[]);   
    event certified(address certifying, uint256 SBFID);
    event revoked(address certifying, uint256 SBFID);
```

**Metadata**:
The metadata of 

**NOTE: all of the metadata schemas are referenced from ____.

### 1. Description:





### 4. Decoding data:

First, the functions for analyzing the metadata (i.e `ClassMetadata` and `NonceMetadata`) are to be used by the corresponding frontend to decode the information of the bond.

This is done via overriding the function interface for functions `classValues` and `nonceValues` by defining the key (which SHOULD be an index) to read the corresponding information stored as a JSON object.

```JSON
{
"title": "symbol",
"_type": "string",
"description": "Lorem ipsum..."
"values": "Class Name 1","Class Name 2","DBIT Fix 6M",
}
```

e.g. in the above example, to get the `symbol` of the given class id, we can use the class id as a key to get the `symbol` value in the values, which then can be used for fetching the detail for instance.

## Rationale

**Metadata structure**: Instead of utilizing a mapping from address, the bond's metadata like the time of redemption, redemption conditions, and interest rate can be stored in the bond class and nonce structures. Classes represent the different bond types, and nonces represent the various period of issuances. Nonces under the same class share the same metadata. Meanwhile, nonces are non-fungible. Each nonce can store a different set of metadata. Thus, upon transfer of a bond, all the metadata will be transferred to the new owner of the bond.

```solidity
    // STRUCTURE 
    /**
     * @dev metadata and Values structure of the Metadata, cited from ERC-3475
     */
    struct Metadata {
        string title;
        string _type;
        string description;
    }

```

```solidity
    struct Values { 
        string stringValue;
        uint uintValue;
        address addressValue;
        bool boolValue;
    }
```

**Requirement structure**: 

```solidity
    /**
     * @dev structure that defines the parameters for specific issuance of bonds and amount which are to be transferred/issued/given allowance, etc.
     * @notice this structure is used for the verification process, it chontains the metadata, logic and expectation
     * @logic given here MUST be either ("and", "or")
     */
    struct Requirement {
        Metadata metadata;
        string logic;
        Values expectation;
    }
```



## Backwards Compatibility

However, any existing token contract can issue its bonds by delegating the minting role to a bank contract with the interface of this standard built-in. Check out our reference implementation for the correct interface definition.

To ensure the indexing of transactions throughout the bond lifecycle (i.e  "Issue", "Redeem" and "Transfer" functions), events cited in specification section  MUST be emitted when such transaction is passed.

**Note that the this standard interface is also compatible with [EIP-20](./eip-20.md), [EIP-721](./eip-721.md) and [EIP-3475](./eip-3475.md) interface.**

However, the update is needed for the implementation of the KYC modifier.

Acceptable collateral can be in the form of [EIP-20](./eip-20.md) tokens, [EIP-721](./eip-721.md) and  [EIP-3475](./eip-3475.md)  tokens, or other bonds represented by the standard.Thus bonds can now represent a collection of collaterals (of the same type) of all fungible/non-fungible or semi-fungible tokens.

## Test Cases



Test-case for the minimal reference implementation is [here](../assets/eip-3475/ERC3475.test.ts). Use the Truffle box to compile and test the contracts.

## Reference Implementation

- [Interface]


- [Basic Example]
  - This demonstration shows only minimalist implementation.

## Security Considerations

- The `function setApprovalFor()` gives the operator role in this standard. It has all the permissions to transfer, burn and redeem bonds by default.

## Copyright

Copyright and related rights waived via [CC0](../LICENSE.md).

